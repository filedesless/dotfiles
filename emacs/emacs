;;; .emacs -- my emacs conf
;;; Commentary:

;;; Code:
;; opposite of C-x o
(global-set-key (kbd "C-x p") 'previous-multiframe-window)

;; add melpa package repo
(require 'package)
(setq package-enable-at-startup nil)
(add-to-list 'package-archives
	     '("melpa-stable" . "https://stable.melpa.org/packages/"))

(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(haskell-process-type (quote cabal-new-repl))
 '(inhibit-default-init t)
 '(inhibit-startup-buffer-menu t)
 '(inhibit-startup-echo-area-message nil)
 '(inhibit-startup-screen t)
 '(package-selected-packages
   (quote
    (magit smex flycheck-elm elm-mode highlight-indentation pylint go-eldoc flycheck-golangci-lint go-complete moe-theme rust-mode nix-mode nixos-options auctex git dracula-theme haskell-mode haskell-emacs go-mode vmd-mode markdown-preview-eww markdown-preview-mode markdown-mode+ markdown-mode yaml-mode)))
 '(vc-follow-symlinks nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; Yaml mode
(require 'yaml-mode)
(add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

(add-hook 'yaml-mode-hook
    '(lambda ()
       (define-key yaml-mode-map "\C-m" 'newline-and-indent)))

(require 'haskell-interactive-mode)
(require 'haskell-process)
(add-hook 'haskell-mode-hook 'interactive-haskell-mode)



(menu-bar-mode -1)
(tool-bar-mode 0)

(add-to-list 'auto-mode-alist '("emacs$" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))

(require 'linum)
(setq linum-format "%4d \u2502 ")
(global-linum-mode 1)

;; provides type info at cursor
(require 'go-eldoc)
(add-hook 'go-mode-hook 'go-eldoc-setup)

;; provides completions on M-tab
(require 'go-complete)
(add-hook 'completion-at-point-functions 'go-complete-at-point)

;; gofmt on save
(defun my-go-mode-hook ()
  "Use goimports instead of go-fmt."
  (setq gofmt-command "goimports")
  ; Call Gofmt before saving
  (add-hook 'before-save-hook 'gofmt-before-save)
  ; Customize compile command to run go build
  (if (not (string-match "go" compile-command))
      (set (make-local-variable 'compile-command)
	   "go build -v && go test -v && go vet"))
  ; Godef jump key binding
  (local-set-key (kbd "M-.") 'godef-jump)
  (local-set-key (kbd "M-*") 'pop-tag-mark)
)
(add-hook 'go-mode-hook 'my-go-mode-hook)

;; whitespace clean on save
(add-hook 'before-save-hook 'whitespace-cleanup)

(require 'python)
(setq python-shell-interpreter "python3")

;; FlyCheck (error checking, and error checking checking)
(require 'flycheck)
(setq flycheck-python-pycompile-executable "python3")
(add-hook 'after-init-hook #'global-flycheck-mode)
(eval-after-load 'flycheck
  '(add-hook 'flycheck-mode-hook #'flycheck-golangci-lint-setup))


;; ido
(require 'ido)
(ido-mode 1)
(setq ido-enable-flex-matching t) ;; enable fuzzy matching
;; idomenu
(autoload 'idomenu "idomenu" nil t)

(setq backup-directory-alist '(("." . "~/.emacs_save")))

(smex-initialize)
(global-set-key (kbd "M-x") 'smex)
(global-set-key (kbd "M-X") 'smex-major-mode-commands)
(global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)

;; magit
(require 'magit)
(global-set-key (kbd "C-x g") 'magit-status)

(load-theme 'misterioso)


(provide '.emacs)
;;; .emacs ends here
