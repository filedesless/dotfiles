#+TITLE: Filedesless' Emacs Configuration
#+OPTIONS: toc:3

* Old file
** General configurations
*** Open this file
    Custom function to open my emacs config
    #+BEGIN_SRC emacs-lisp
      (defun econf ()
	"Opens my emacs config"
	(interactive)
	(find-file "~/.emacs.d/config.org")
	(find-file-other-window "~/.emacs")
	(other-window 1)
	(org-shifttab 4))
    #+END_SRC

*** C-x p; the opposite of C-x o
    Cycle through frames counter-clockwise
    #+BEGIN_SRC emacs-lisp
      (global-set-key (kbd "C-x p") 'previous-multiframe-window)
    #+END_SRC

*** UI stuff
    Remove clunky icons and make cursor visible
    #+BEGIN_SRC emacs-lisp
      (menu-bar-mode 1)
      (tool-bar-mode 0)
      (setq inhibit-default-init t)
      (setq inhibit-startup-buffer-menu t)
      (setq inhibit-startup-echo-area-message nil)
      (setq inhibit-startup-screen t)
    #+END_SRC

*** Some custom filetypes
    Filetype-based modes for emacs-lisp and unix configs
    #+BEGIN_SRC emacs-lisp
      (add-to-list 'auto-mode-alist '("emacs$" . emacs-lisp-mode))
      (add-to-list 'auto-mode-alist '("\\.*rc$" . conf-unix-mode))
    #+END_SRC

*** Theme
    some nice dark theme
    #+BEGIN_SRC emacs-lisp
      (load-theme 'misterioso)
    #+END_SRC

*** Whitespace cleanup on save
    Avoid clutter like trailing whitespaces
    #+BEGIN_SRC emacs-lisp
      (add-hook 'before-save-hook 'whitespace-cleanup)
    #+END_SRC

*** Custom backup directory
    Save all emacs backups~ to a single directory (also avoiding clutter)
    #+BEGIN_SRC emacs-lisp
      (setq backup-directory-alist '(("." . "~/.emacs_save")))
    #+END_SRC

*** Match parens
    Show matching parens
    #+BEGIN_SRC emacs-lisp
      (show-paren-mode 1)
    #+END_SRC

*** Ido
    Makes file finding easier and more interactive
    #+BEGIN_SRC emacs-lisp
      (ido-mode 1)
      (setq ido-enable-flex-matching t) ;; enable fuzzy matching
      (autoload 'idomenu "idomenu" nil t)
    #+END_SRC

*** Org code snippets
    Allow code execution from src-block
    #+BEGIN_SRC emacs-lisp
      (setq org-export-backends
	    (append org-export-backends
		    '("beamer" "twbs")))
      (org-babel-do-load-languages
       'org-babel-load-languages
       '(
	 (python . t)
	 (haskell . t)
	 ;(shell . t)
	 ))
    #+END_SRC

*** Eww visual-line-mode hook
    Makes eww line-wrap
    #+BEGIN_SRC emacs-lisp
      (add-hook 'eww-mode-hook 'visual-line-mode)
    #+END_SRC


** Utility functions
*** All
    A generalized `and`
    #+BEGIN_SRC emacs-lisp
      (defun all (l)
	"Checks wether all elements of the list l are non-nill"
	(if (consp l)
	    (and (car l) (all (cdr l)))
	  t))
    #+END_SRC


** Packages
*** Default package repository
    Use MELPA stable to fetch new packages, and ensure they are installed
    #+BEGIN_SRC emacs-lisp
      (package-initialize)
      (add-to-list 'package-archives
		   '("melpa" . "https://melpa.org/packages/"))
      (setq package-check-signature nil)
      (unless (all (mapcar 'package-installed-p package-selected-packages))
	(package-refresh-contents))
      (package-install-selected-packages)
    #+END_SRC

*** Get path from shell
    A GNU Emacs library to ensure environment variables inside Emacs look the same as in the user's shell.
    #+BEGIN_SRC emacs-lisp
      (when (memq window-system '(mac ns x))
	(exec-path-from-shell-initialize))
    #+END_SRC

*** Evil mode
    Emacs VI Layer, for vim bindings
    #+BEGIN_SRC emacs-lisp
      (setq evil-want-C-d-scroll t)
      (setq evil-want-C-u-scroll t)
      (require 'evil)
      (evil-mode 1)
      (setq evil-normal-state-cursor'("red" box))
      (setq evil-emacs-state-cursor'("gold" box))
    #+END_SRC

*** Relative line number
    Shows relative line numbers on the leftbar
    #+BEGIN_SRC emacs-lisp
      (require 'linum-relative)
      (setq linum-relative-format "%3s \u2502 ")
      (setq linum-relative-current-symbol "Î»")
      (global-linum-mode t)
      (linum-relative-on)
      ;; disable linum for certain modes
      (add-hook 'term-mode-hook 'my-inhibit-global-linum-mode)
      (add-hook 'pdf-view-mode-hook 'my-inhibit-global-linum-mode)
      (defun my-inhibit-global-linum-mode ()
	"Counter-act function `global-linum-mode'."
	(add-hook 'after-change-major-mode-hook
		  (lambda () (linum-mode 0))
		  :append :local))

    #+END_SRC

*** YAML Mode
    Provides syntax highlighting and helper for YAML files
    #+BEGIN_SRC emacs-lisp
      (require 'yaml-mode)
      (add-to-list 'auto-mode-alist '("\\.yml\\'" . yaml-mode))

      (add-hook 'yaml-mode-hook
	  '(lambda ()
	     (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
    #+END_SRC

*** Interactive Haskell Mode
    Gives a Haskell REPL when editing haskell files
    #+BEGIN_SRC emacs-lisp
      (require 'haskell-interactive-mode)
      (require 'haskell-process)
      (add-hook 'haskell-mode-hook 'interactive-haskell-mode)
      ;'(haskell-process-type (quote cabal-new-repl))
    #+END_SRC

    #+RESULTS:
    | haskell-process-type | (quote cabal-new-repl) |

*** Go Mode
    Syntax highlighting, go format and godoc integration
    #+BEGIN_SRC emacs-lisp
      ;; provides type info at cursor
      (require 'go-eldoc)
      (add-hook 'go-mode-hook 'go-eldoc-setup)

      ;; provides completions on M-tab
      (require 'go-complete)
      (add-hook 'completion-at-point-functions 'go-complete-at-point)

      ;; gofmt on save
      (defun my-go-mode-hook ()
	"Use goimports instead of go-fmt."
	(setq gofmt-command "goimports")
	; Call Gofmt before saving
	(add-hook 'before-save-hook 'gofmt-before-save)
	; Customize compile command to run go build
	(if (not (string-match "go" compile-command))
	    (set (make-local-variable 'compile-command)
		 "go build -v && go test -v && go vet"))
	; Godef jump key binding
	(local-set-key (kbd "M-.") 'godef-jump)
	(local-set-key (kbd "M-*") 'pop-tag-mark)
      )
      (add-hook 'go-mode-hook 'my-go-mode-hook)
    #+END_SRC

*** Python Mode
    Python check and REPL
    #+BEGIN_SRC emacs-lisp
      (require 'python)
      (setq python-shell-interpreter "python3")
    #+END_SRC

*** Flycheck
    Error checking
    #+BEGIN_SRC emacs-lisp
      (require 'flycheck)
      (setq flycheck-python-pycompile-executable "python3")
      (add-hook 'after-init-hook #'global-flycheck-mode)
      (eval-after-load 'flycheck
	'(add-hook 'flycheck-mode-hook #'flycheck-golangci-lint-setup))
    #+END_SRC

*** Flycheck Haskell
    Package for specialized haskell checking
    #+BEGIN_SRC emacs-lisp
      (require 'flycheck-haskell)
      (add-hook 'haskell-mode-hook #'flycheck-haskell-setup)
    #+END_SRC

*** Smex
    Enhanced M-x, with fuzzy matching, and suggestions based on usage
    #+BEGIN_SRC emacs-lisp
      (smex-initialize)
      (global-set-key (kbd "M-x") 'smex)
      (global-set-key (kbd "M-X") 'smex-major-mode-commands)
      (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
    #+END_SRC

*** Magit
    Git interactive interface
    #+BEGIN_SRC emacs-lisp
      (require 'magit)
      (global-set-key (kbd "C-x g") 'magit-status)
    #+END_SRC

*** Powerline
    Nice bar at the bottom
    #+BEGIN_SRC emacs-lisp
      (require 'powerline)
      (powerline-default-theme)
    #+END_SRC

*** Pdf tools
    Render PDFs within Emacs
    #+BEGIN_SRC emacs-lisp
      (pdf-loader-install)
    #+END_SRC
